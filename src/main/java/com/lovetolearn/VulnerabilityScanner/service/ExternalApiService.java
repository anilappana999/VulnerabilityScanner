package com.lovetolearn.VulnerabilityScanner.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Semaphore;
import java.util.concurrent.atomic.AtomicReference;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.lovetolearn.VulnerabilityScanner.model.Dependency;

import reactor.core.publisher.Mono;

@Service
public class ExternalApiService {

	private final WebClient webClient;

	@Autowired
	public ExternalApiService(WebClient.Builder webClientBuilder) {
		this.webClient = webClientBuilder.baseUrl("").build();

	}

	public List<List<Dependency>> getListOfDependencies(List<String> urlList) throws Exception {

		List<List<Dependency>> depList = new ArrayList<>();
		urlList.forEach(url -> {
			try {
				depList.add(fetchDataFromExternalApi(url));
			} catch (InterruptedException e) {

				e.printStackTrace();
			}

		});
		return depList;

	}

	public List<List<Map<String, String>>> getVulnerabileDependencies(List<List<Dependency>> listOfDependencies) {

		String mavenBaseUrl = "https://mvnrepository.com/artifact/";

		List<List<Map<String, String>>> mapList = new ArrayList<>();

		for (List<Dependency> list : listOfDependencies) {
			List<Map<String, String>> listOfMap = new ArrayList<>();
			for (Dependency dependencyFromList : list) {

				String dependency = mavenBaseUrl.concat(dependencyFromList.getGroupId()).concat("/")
						.concat(dependencyFromList.getArtifactId()).concat("/").concat(dependencyFromList.getVersion());

				Map<String, String> map = new HashMap<>();

				try {
					boolean result = isDependencyVulenerable(dependency);
					if (result) {
						map.put(dependency, "Dependency is vulnerable");
					} else {
						map.put(dependency, "Dependency is secure");
					}

				} catch (InterruptedException e) {

					e.printStackTrace();
				}
				listOfMap.add(map);
			}
			mapList.add(listOfMap);
		}

		return mapList;

	}

	public boolean isDependencyVulenerable(String dependency) throws InterruptedException {

		Semaphore semaphore = new Semaphore(0);

		boolean result = false;

		Mono<String> xmlResult = webClient.get().uri(dependency).retrieve().bodyToMono(String.class);
		final AtomicReference<String> ref = new AtomicReference<>();
		xmlResult.subscribe(
				// onNext: This block will be executed when data is available
				data -> {

					ref.set(data);

					semaphore.release();

				});

		semaphore.acquire();

		if (ref.get().contains("vulnerabilities")) {
			result = true;
		}

		return result;
	}

	public List<Dependency> fetchDataFromExternalApi(String url) throws InterruptedException {

		Semaphore semaphore = new Semaphore(0);
		Mono<String> xmlResult = webClient.get().uri(url).retrieve().bodyToMono(String.class);
		final AtomicReference<String> response = new AtomicReference<>();
		xmlResult.subscribe(
				// onNext: This block will be executed when data is available
				data -> {
					System.out.println("data" + data);
					response.set(data);

					semaphore.release();

					// Your logic to process or handle the data goes here
				});

		semaphore.acquire();

		String pomFile = response.get();

		String parentDependencyVersion = pomFile.substring(pomFile.indexOf("<version>") + 9, pomFile.indexOf("</v"));

		String dependenciesList = pomFile.substring(pomFile.indexOf("<dependencies>"),
				pomFile.indexOf("</dependencies>"));

		String[] dependencies = dependenciesList.split("<groupId>");
		List<String> splittedDependencylist = new ArrayList<>();

		for (int i = 1; i < dependencies.length; i++) {
			splittedDependencylist.add(dependencies[i]);
		}

		List<Dependency> depenList = new ArrayList<>();

		splittedDependencylist.stream().forEach(dependencyBreakUp -> {

			Dependency dependency = new Dependency();
			dependency.setArtifactId(dependencyBreakUp.substring(dependencyBreakUp.indexOf("<artifactId>") + 12,
					dependencyBreakUp.lastIndexOf("</artifactId>")));
			dependency.setGroupId(dependencyBreakUp.substring(0, dependencyBreakUp.indexOf("</groupId>")));

			if (dependencyBreakUp.contains("version")) {
				dependency.setVersion(dependencyBreakUp.substring(dependencyBreakUp.indexOf("<version>") + 9,
						dependencyBreakUp.lastIndexOf("</version>")));
			} else {
				dependency.setVersion(parentDependencyVersion);
			}
			depenList.add(dependency);

		});

		return depenList;
	}
}
